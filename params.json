{"name":"Fx-serials","tagline":"Automagical JavaFX2 Beans","body":"Juffrou FXSerials\r\n=================\r\n\r\n_Automagical JavaFX2 Beans_\r\n\r\nCopyright (C) 2014- by Carlos Martins, All rights reserved.\r\n\r\nTransforms traditional Java Beans into JavaFX2 Beans by adding property methods which return the appropriate JavaFX property type.\r\n\r\nGiven a traditional java bean like the following:\r\n\r\n```java\r\n\t\r\n\tpackage example.fxseraials\r\n\r\n\tpublic class Person implements FxSerials {\r\n\t\r\n\t\tprivate static final long serialVersionUID = 6329998877045393661L;\r\n\r\n\t\tprivate String name;\r\n\t\r\n\t\tpublic String getName() {\r\n\t\t\treturn name;\r\n\t\t}\r\n\t\tpublic void setName(String name) {\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nIts corresponding JavaFX2 Bean can be obtained by using one of two different methods:\r\n\r\n- Deserializing an object stream containing traditional Java Beans\r\n- Explicitly proxying one traditional Java Bean\r\n\r\nDeserializing example:\r\n\r\n```java\r\n\r\n\tPerson person = new Person();\r\n\tperson.setName(\"Carlos Martins\");\r\n\tFileOutputStream fileOut = new FileOutputStream(\"person.ser\");\r\n\tObjectOutputStream out = new ObjectOutputStream(fileOut);\r\n\tout.writeObject(person);\r\n\tout.close();\r\n\tfileOut.close();\r\n\r\n\tfxInputStream = new FxInputStream(new FileInputStream(\"person.ser\"););\r\n    Person personFx = (Person) fxInputStream.readObject();\r\n```\r\n\r\nTransforming example:\r\n\r\n```java\r\n\r\n\tFxSerialsUtil transformer = new FxSerialsUtil();\r\n\t\r\n\tPerson person = new Person();\r\n\tperson.setName(\"Carlos Martins\");\r\n\t\r\n\tPerson personFx = transformer.getProxy(person);\r\n```\r\n\r\nIn both cases, the personFx object returned extends Person and implements the FxSerialsBean interface. This is what its code would look like:\r\n\r\n```java\r\n\r\n\tpackage example.fxseraials._fx_\r\n\r\n\tpublic class Person extends example.fxseraials.Person implements FxSerialsBean {\r\n\t\r\n\t\tprivate static final long serialVersionUID = 6329998877045393661L;\r\n\t\t\r\n\t\tprivate Map<String, JavaBeanStringProperty> __fx_properties = new HashMap<String, JavaBeanStringProperty>();\r\n\r\n\t\tpublic ReadOnlyJavaBeanProperty getProperty(String propertyName) {\r\n\t\t\tMethod m = getClass().getMethod(propertyName + \"Property\", null);\r\n\t\t\treturn (ReadOnlyJavaBeanProperty) m.invoke(this, null);\r\n\t\t}\r\n\t\t\r\n\t\tpublic JavaBeanStringProperty nameProperty() {\r\n\t\t\tjavafx.beans.property.adapter.JavaBeanStringProperty p = (javafx.beans.property.adapter.JavaBeanStringProperty) __fx_properties.get(\"name\");\r\n\t\t\tif (p == null) {\r\n\t\t\t\tp = javafx.beans.property.adapter.JavaBeanStringPropertyBuilder.create().bean(this).name(\"name\").getter(\"getName\").setter(\"setName\").build();\r\n\t\t\t\t__fx_properties.put(\"name\", p);\r\n\t\t\t}\r\n\t\t\treturn p;\r\n\t\t}\r\n\t\t\r\n\t\tpublic void setName(String name) {\r\n\t\t\tsuper.setName(name);\r\n\t\t\tnameProperty().fireValueChangedEvent();\r\n\t\t}\r\n\t}\r\n\r\n```\r\n\r\nThis class is not instantiated by you, so you can only access the method `nameProperty` through introspection. The good news in that the implemented `FxSerialsBean` interface defines a method which allows you to obtain any property:\r\n\r\n```java\r\n\r\n\tpublic ReadOnlyJavaBeanProperty getProperty(String propertyName);\r\n```\r\n\r\nNote: FXSerials uses [Javassist version 3](https://github.com/jboss-javassist/javassist \"Javassist on Github\")\r\n\r\nThis software is distributed under the Apache License Version 2.0.\r\n","google":"UA-36088259-4","note":"Don't delete this file! It's used internally to help with page regeneration."}